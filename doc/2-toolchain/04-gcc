# Tool Chain: GCC
# Build and install as mlfs

# Set the environment for cross-compiling if not done already.
CC="${MLFS_TARGET}-gcc"
CXX="${MLFS_TARGET}-g++"
AR="${MLFS_TARGET}-ar"
AS="${MLFS_TARGET}-as"
RANLIB="${MLFS_TARGET}-ranlib"
LD="${MLFS_TARGET}-ld"
STRIP="${MLFS_TARGET}-strip"

# Additional sources to add
# Added "pipping" from xz/gunzip for tar, improves 
# compatibility with sane implementations.
xz -cd ../pkgs/gmp-6.2.1.tar.xz | tar -xf -
gunzip -cd ../pkgs/mpc-1.2.1.tar.gz | tar -xf -
xz -cd ../mpfr-4.1.0.tar.xz | tar -xf -
mv -v gmp-6.2.1 gmp
mv -v mpc-1.2.1 mpc
mv -v mpfr-4.1.0 mpfr

# Apply patches [from void-alpine]
bash ../patches/gcc-10.3.1_git20210424-alpine/apply_patches_ct.sh

# Re-create internal header
cat gcc/{limitx,glimits,limity}.h > \
  $(dirname $($MLFS_TARGET-gcc -print-libgcc-file-name))/include-fixed/limits.h

## Change the location of GCC's default dynamic linker to use the one installed in /tools
#
# For i686/x86_64:
for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's/\/lib\(64\)\?\(32\)\?\/ld/\/tools&/g' \
      -e 's/\/usr/\/tools/g' ${file}.orig > ${file}
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> ${file}
  touch ${file}.orig
done

# For ARM (32-bit)
for file in gcc/config/arm/linux-eabi.h
do
  cp -uv $file{,.orig}
  sed -e 's/\/lib\(64\)\?\(32\)\?\/ld/\/tools&/g' \
      -e 's/\/usr/\/tools/g' ${file}.orig > ${file}
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> ${file}
  touch ${file}.orig
done

# For AARCH64 (64-bit)
for file in gcc/config/aarch64/aarch64-linux.h
do
  cp -uv $file{,.orig}
  sed -e 's/\/lib\(64\)\?\(32\)\?\/ld/\/tools&/g' \
      -e 's/\/usr/\/tools/g' ${file}.orig > ${file}
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> ${file}
  touch ${file}.orig
done

# Configure in dedicated build directory
mkdir -v build && cd build
CFLAGS='-g0 -O0' \
CXXFLAGS='-g0 -O0' \
../configure                                       \
    --target=${MLFS_TARGET}                        \
    --build=${MLFS_HOST}                           \
    --host=${MLFS_TARGET}                          \
    --prefix=/tools                                \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --enable-languages=c,c++                       \
    --disable-libstdcxx-pch                        \
    --disable-multilib                             \
    --disable-bootstrap                            \
    --disable-libgomp                              \
    --disable-libquadmath                          \
    --disable-libssp                               \
    --disable-libvtv                               \
    --disable-symvers                              \
    --disable-libitm                               \
    --disable-libsanitizer                         

# Compile
PATH=/bin:/usr/bin:/cross-tools/bin:/tools/bin make 

# Install
make install

# Per LFS book explanation:
# Many programs and scripts run cc instead of gcc, which is used 
# to keep programs generic and therefore usable on all kinds 
# of UNIX systems where the GNU C compiler is not always 
# installed. Running cc leaves the system administrator free 
# to decide which C compiler to install. Create a link:
ln -sv gcc /tools/bin/cc

# Cannot remember why. I may remove these 3 commands.
CC_INCLUDEDIR=$(dirname $(${MLFS_TARGET}-gcc -print-libgcc-file-name))/include &&
find ${GCC_INCLUDEDIR}/* -maxdepth 0 -xtype d -exec rm -rvf '{}' \; &&
rm -vf $(grep -l "DO NOT EDIT THIS FILE" ${GCC_INCLUDEDIR}/*) 

# Test toolchain
echo 'int main(){}' > dummy.c &&
gcc dummy.c
readelf -l a.out | grep ': /tools' 
rm -v dummy.c a.out
