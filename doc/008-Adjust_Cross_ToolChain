# Adjust Cross Tool Chain
#
# Adjustment is needed when Host has a different libc than target.
# Otherwise GCC of /tools will fail to build

# Dump current cross-gcc specs 
export SPECFILE=`dirname $(${MLFS_TARGET}-gcc -print-libgcc-file-name)`/specs
${MLFS_TARGET}-gcc -dumpspecs > specs

# Modify dumped specs file for every instance of:
# /lib/ld-musl-$ARCH.so.1 to /tools/lib/ld-musl-$ARCH.so.1
case $(uname -m) in
  x86_64)  sed -i 's/\/lib\/ld-musl-x86_64.so.1/\/tools\/lib\/ld-musl-x86_64.so.1/g' specs
           # check with
           grep "/tools/lib/ld-musl-x86_64.so.1" specs  --color=auto
           ;;
  i686)    sed -i 's/\/lib\/ld-musl-i386.so.1/\/tools\/lib\/ld-musl-i386.so.1/g' specs
           # check with
           grep "/tools/lib/ld-musl-i386.so.1" specs  --color=auto
           ;;
  arm*)    sed -i 's/\/lib\/ld-musl-arm/\/tools\/lib\/ld-musl-arm/g' specs
           # check with
           grep "/tools/lib/ld-musl-arm" specs  --color=auto
           ;;
  aarch64) sed -i 's/\/lib\/ld-musl-aarch64/\/tools\/lib\/ld-musl-aarch64/g' specs
           # check with
           grep "/tools/lib/ld-musl-aarch64" specs  --color=auto
           ;;
esac

# Install modified specs to the cross toolchain
mv -v specs $SPECFILE
unset SPECFILE

# Quick check the tool chain:
echo 'int main(){}' > dummy.c
${MLFS_TARGET}-gcc dummy.c
${MLFS_TARGET}-readelf -l a.out | grep Requesting

# Output should be:
# [Requesting program interpreter: /tools/lib/ld-musl-x86_64.so.1]
# or
# [Requesting program interpreter: /tools/lib/ld-musl-i386.so.1]
# or
# [Requesting program interpreter: /tools/lib/ld-musl-arm.so.1]
# or
# [Requesting program interpreter: /tools/lib/ld-musl-aarch64.so.1]

# If all went well, remove:
rm -v a.out dummy.c 
