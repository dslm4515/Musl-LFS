# Final System: GCC
# This section is done in Chroot environment

case $(uname -m) in
  x86_64) export TRUPLE="x86_64-linux-musl"
          export EXTRA_CONFIG=" --with-arch=x86-64"
          ;;
  i686)   export TRUPLE="i686-linux-musl"
          export EXTRA_CONFIG=" --with-arch=pentium3 --with-tune=pentium-m"
          ;;
  armv7l) export TRUPLE="armv7l-linux-musleabihf"
          export EXTRA_CONFIG=" --with-arch=armv7-a --with-tune=generic-armv7-a --with-fpu=vfpv3-d16 --with-float=hard --with-abi=aapcs-linux --with-mode=thumb"
          ;;
  armv6l) export TRUPLE="armv6l-linux-musleabihf"
          export EXTRA_CONFIG=" --with-arch=armv6zk --with-tune=arm1176jzf-s --with-fpu=vfp --with-float=hard --with-abi=aapcs-linux"
          ;;
  aarch64) export TRUPLE="aarch64-linux-musleabihf"
           export EXTRA_CONFIG=" --with-arch=armv8-a --with-abi=lp64 --enable-fix-cortex-a53-835769 --enable-fix-cortex-a53-843419"
           sed -i '/m64=/s/lib64/lib/' gcc/config/aarch64/t-aarch64-linux
          ;;
esac 

# For ARM disable libitm because of texrels
case $(uname -m) in
     arm*) export LIBITM=false ;;
esac

# Add isl source
tar xf ../pkgs/isl-0.24.tar.xz
mv isl-0.24 isl

# Apply patches [from alpine-linux]
bash ../patches/gcc-alpine/apply_patches_ct.sh 
patch -Np1 -i ../patches/gcc-alpine/0021-Alpine-musl-package-provides-libssp_nonshared.a.-We-.patch

# Configure source in dedicated build directory:
mkdir -v build && cd build

# Disable features not used
export  NOFF="--disable-libstdcxx-pch "
export NOFF+="--disable-nls "
export NOFF+="--disable-multilib "
export NOFF+="--disable-bootstrap "
export NOFF+="--disable-symvers "
export NOFF+="--disable-libsanitizer "
export NOFF+="--disable-libssp "
export NOFF+="--disable-libmpx "
export NOFF+="--disable-libmudflap "
export NOFF+="--disable-fixed-point "
export NOFF+="--disable-sjlj-exceptions "
export NOFF+="--disable-werror "

# Enable graphite
export XCONFIG="--with-ppl=yes --with-cloog=yes "

# Enable features for x86_54
export XTRA86="--with-arch=x86-64 "

# Enable features
export  FON="--enable-threads=posix "
export FON+="--enable-clocale=generic "
export FON+="--enable-tls "
export FON+="--enable-libstdcxx-time "
export FON+="--enable-fully-dynamic-string "
export FON+="--enable-default-pie "
export FON+="--enable-default-ssp "
export FON+="--enable-linker-build-id "
export FON+="--enable-checking=release "
export FON+="--enable-cloog-backend "
export FON+="--enable-__cxa_atexit "
export FON+="--enable-lto "
export FON+="--enable-plugins "
export FON+="--with-system-zlib "
export FON+="--with-linker-hash-style=gnu "
export FON+="--with-isl "

# Configure source
SED=sed  libat_cv_have_ifunc=no  \
../configure --prefix=/usr            \
             --build="${TRUPLE}" \
             --enable-languages=c,c++,lto \
             --with-pkgversion="MLFS 10.0.0" $NOFF $XTRA86 $XCONFIG $FON

# Build
make

# Test GCC:
ulimit -s 32768
# Test the results as a non-privileged user, but do not stop at errors
chown -Rv nobody . 
su nobody -s /bin/bash -c "PATH=$PATH make -k check"

# To receive a summary of the test suite results, run:
../contrib/test_summary
# Or, For only the summaries, pipe the output through grep -A7 Summ"
../contrib/test_summary | grep -A7 Summ

# Install
make install

# Build useful utilities
cc -fpie ../../files/musl/getent.c -o getent
cc -fpie ../../files/musl/getconf.c -o getconf
cc -fpie ../../files/musl/iconv.c -o iconv

cp -v getent  /usr/bin/
cp -v getconf /usr/bin/
cp -v iconv   /usr/bin/
cp -v ../../files/musl/getent.1   /usr/share/man/man1/
cp -v ../../files/musl/getconf.1  /usr/share/man/man1/

# Create a symlink required by the FHS for "historical" reasons
ln -sv ../bin/cpp /usr/lib

# Many packages use the name cc to call the C compiler. To 
# satisfy those packages, create a symlink
ln -sv gcc /usr/bin/cc

# Add a compatibility symlink to enable building programs with 
# Link Time Optimization (LTO): 
install -v -dm755 /usr/lib/bfd-plugins
ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/11.2.0/liblto_plugin.so \
        /usr/lib/bfd-plugins/
mkdir -pv /usr/share/gdb/auto-load/usr/lib
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib

# Test final system's toolchain:
echo 'int main(){}' > dummy.c
cc dummy.c -v -Wl,--verbose &> dummy.log
readelf -l a.out | grep ': /lib'
# Should output:
# [Requesting program interpreter: /lib/ld-musl-x86_64.so.1]
# or
# [Requesting program interpreter: /lib/ld-musl-i386.so.1]
# or
# [Requesting program interpreter: /lib/ld-musl-arm.so.1]
# or
# [Requesting program interpreter: /lib/ld-musl-aarch64.so.1]
grep  'crt[1in].o succeeded' dummy.log
# Should output:
# attempt to open /usr/lib/gcc/$ARCH-linux-musl/10.2.0/../../../../lib/Scrt1.o succeeded
# attempt to open /usr/lib/gcc/$ARCH-linux-musl/9.2.0/../../../../lib/crti.o succeeded
# attempt to open /usr/lib/gcc/$ARCH-linux-musl/10.2.0/../../../../lib/crtn.o succeeded
grep -B2 '^ /usr/lib/gcc' dummy.log
# Should output:
# #include <...> search starts here:
# /usr/lib/gcc/$ARCH-linux-musl/10.2.0/include-fixed
# /usr/local/include
# /usr/include
# /usr/lib/gcc/$ARCH-linux-musl/10.2.0/include
grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'
# Should output:
# SEARCH_DIR("/usr/$ARCH-pc-linux-musl/lib32")
# SEARCH_DIR("/usr/local/lib32")
# SEARCH_DIR("/lib32")
# SEARCH_DIR("/usr/lib32")
# SEARCH_DIR("/usr/$ARCH-pc-linux-musl/lib")
# SEARCH_DIR("/usr/local/lib")
# SEARCH_DIR("/lib")
# SEARCH_DIR("/usr/lib");

# If all is well, remove test files:
rm -v dummy.c a.out dummy.log
unset LIBITM

